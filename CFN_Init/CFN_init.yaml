AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  EnvironmentType:
    Description: The environment type of the project (dev or prod)
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  Message:
    Description: Message for HTML page
    Default: Testing conditions and Mapping functionalities in CFN
    Type: String

Mappings:
  RegionalMap:
    us-east-1:
      prod: ami-0182f373e66f89c85 # amazon linux image
      dev: ami-0e86e20dae9224db8 # ubuntu image
    us-west-1:
      prod: ami-025258b26b492aec6
      dev: ami-0d53d72369335a9d6
    eu-north-1:
      prod: ami-0c6da69dd16f45f72
      dev: ami-04cdc91e49cb06165

  DeployInstanceType:
    us-east-1:
      dev: t2.micro
      prod: t2.medium
    us-west-1:
      dev: t2.micro
      prod: t2.medium
    eu-north-1:
      dev: t2.micro
      prod: t2.medium

Conditions:
  IsProduction: !Equals
    - !Ref EnvironmentType
    - prod

  IsDeveloper: !Not
    - !Equals
      - !Ref EnvironmentType
      - prod

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: 'true'

  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: stack
          Value: production

  productionGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref myInternetGateway
      VpcId: !Ref myVPC

  # privateSubnet:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     AvailabilityZone: !Select [ '0', !GetAZs '' ]
  #     CidrBlock: !Select [ '0', !Cidr [ !GetAtt myVPC.CidrBlock, '16', '12' ] ]
  #     MapPublicIpOnLaunch: 'false'
  #     VpcId: !Ref myVPC

  publicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      CidrBlock: !Select
        - '1'
        - !Cidr
          - !GetAtt myVPC.CidrBlock
          - '16'
          - '12'
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref myVPC

  publicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentType} Public Routes

  publicRoute:
    Type: AWS::EC2::Route
    DependsOn: productionGatewayAttachment
    Properties:
      RouteTableId: !Ref publicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway

  publicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnet

  devSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http request to client host
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

  prodSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http request on client host
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

  myTestInstance1:
    Type: AWS::EC2::Instance
    Condition: IsProduction
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          packages:
            yum: 
              httpd: []
          files:
            /var/www/html/index.html:
                content: !Sub | 
                <hmtl><head><title>Amazing test page</title></head><body><h1><center>${Message}</center></h1></body></html>
          services:
            sysvinit:
              httpd: 
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/var/www/html/index.html"    
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT15M
    Properties:
      InstanceType: !FindInMap
        - DeployInstanceType
        - !Ref AWS::Region
        - !Ref EnvironmentType
      ImageId: !FindInMap
        - RegionalMap
        - !Ref AWS::Region
        - !Ref EnvironmentType
      SecurityGroupIds:
        - !Ref prodSecurityGroup
      SubnetId: !Ref publicSubnet
      # KeyName: A4L
      Tags:
        - Key: Name
          Value: Production Instance Test
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource myTestInstance1 --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource myTestInstance1 --region ${AWS::Region}

  myTestInstance2:
    Type: AWS::EC2::Instance
    Condition: IsDeveloper
    Properties:
      InstanceType: !FindInMap
        - DeployInstanceType
        - !Ref AWS::Region
        - !Ref EnvironmentType
      ImageId: !FindInMap
        - RegionalMap
        - !Ref AWS::Region
        - !Ref EnvironmentType
      SecurityGroupIds:
        - !Ref devSecurityGroup
      SubnetId: !Ref publicSubnet
      # KeyName: A4L
      Tags:
        - Key: Name
          Value: Developer Instance Test
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash -xe
          sudo apt update -y
          sudo apt upgrade -y
          sudo apt install apache2 -y
          systemctl enable apache2
          systemctl start apache2
          echo "<hmtl><head><title>Amazing test page</title></head><body><h1><center>${Message}</center></h1></body></html>" > /var/www/html/index.html
  # Outputs:
  #   InstanceUrl:
  #     Description: Url of the web instance
  #     Value: !Join [ '', [ 'http://', !GetAtt myTestInstance1.DNSName ] ]
  #   MyVPC:
  #     Description: The VPC Id used to set up the Resources
  #     Value: !Ref myVPC